"""
모험가길드
한 마을에 모험가 n명이 있다. n명의 모험가 대상으로 공포도를 측정하였는데
공포도가 높은 모험가는 쉽게 공포를 느껴 위기상황에 대처할 능력이 떨어진다.
모험가 길드장은 그룹을 안전하게 구성하고자 공포도가 x인 모험가는 반드시 x명 이상으로 구성한 모험가 그룹에 참여해야
여행을 떠날 수 있도록 규정했다. 길드장은 최대 몇개의 모험가 그룹을 만들 수 있는지 궁금하다.
n명의 모험가에 대한 정보가 주어졌을때 여행을 떠날 수 있는 그룹 수의 최댓값을 구하는 프로그램을 작성하시오

예를들어 n = 5 이고 각 모험가의 공포도가 다음과 같다고 가정한다
2 3 1 2 2

이때, 그룹 1에 공포도가 1,2,3인 모험가를 한명씩 넣고, 그룹2에 공포도가 2인 남은 두명을 넣게 되면 총 2개의 그룹을 만들 수 있다.
또한 몇명의 모험가는 마을에 그대로 남아 있어도 되기 때문에 모든 모험가를 특정한 그룹에 넣을 필요는 없다.

입력조건
1. 첫째 줄에 모험가의 수 n이 주어진다 (1 <= n <= 100,000)
2. 둘째 줄에 각 모험가의 공포도 값을 n 이하의 자연수로 주어지며 각 자연수는 공백으로 구분 된다.

출력조건
1. 여행을 떠날 수 있는 그룹 수의 최댓값을 출력한다.

해결방안
맨처음에 나는 내림차순으로 정렬하여 풀면 되겠다고 생각했는데, 오름차순으로 정렬해서 풀어야 최적의 해를 찾을 수 있다.
예를들어 n이 5이고, 공포도가 5 3 1 2 3 이라고 가정했을때. 내림차순의 경우 5 3 3 2 1 로 정렬이 되고,
공포도가 5인 모험가부터 그룹을 매칭하게 되면 1개밖에 매칭할수없기 때문.

현재그룹에 포함된 모험가의 수 >= 현재 확인하고 있는 모험가의 공포도 가 될때 그룹으로 설정 하면 된다
"""

# n : 모험가의 수 / fear : 각 모험가들의 공포도
n = int(input())
fear = list(map(int, input().split()))

# result : 결과값 / count : 현재 그룹의 모험가수
result = 0
count = 0

# 모험가들의 공포도를 오름차순으로 정렬한다. 오름차순으로 정렬해야 최적의 해를 찾을 수 있음.
# 그 이유는 항상 최소한의 모험가의 수만 포함하여 그룹을 결성하면 최대한 많이 그룹을 결성할 수 있기 때문
fear.sort()

for data in fear:
    # 현재 모험가를 먼저 그룹원으로 포함 시킨다.
    count += 1
    # 현재그룹에 포함된 모험가의 수 >= 현재 확인하고 있는 모험가의 공포도 일 경우 그룹을 결성한다.
    if count >= data:
        result += 1
        # count는 다시 0으로 초기화 시킨다
        count = 0

print(result)