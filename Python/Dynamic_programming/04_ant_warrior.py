"""
개미전사는 메뚜기 마을의 식량창고를 몰래 공격하려고 한다.
메뚜기 마을에는 여러개의 식량창고가 있는데 일직선으로 되어 있다. 각 식량창고에는 정해진 수의 식량을 저장하고 있으며
개미전사는 식량창고를 선택적으로 약탈하여 식량을 빼앗을 예정이다.
메뚜기 정찰벼들은 식량창고중에서 서로 인접한 식량창고가 공격받으면 바로 알아차린다.
개미전사가 정찰병에게 들키지 않고 약탈하기 위해서는 최소 1칸 이상의 간격을 두고 약탈해야 한다.
예를들어 1,3,1,5 로 식량창고가 있을 경우
3, 5 를 약탈하여 총 8의 식량을 약탈 할 수 있다.

식량창고 n개가 주어졌을때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하시오

입력조건
1. 첫째줄에 식량창고 n의 갯수가 주어진다 (3 <= n <= 100)
2. 둘째 줄에 공백으로 구분되어 식량창고에 저장된 식량의 갯수 k가 주어진다 (0 <= k <= 1000)
"""

n = int(input())
arr = list(map(int, input().split()))

# 계산된 결과를 저장하기 위한 DP 테이블 초기화 (창고가 i번째 까지 존재할때 최적의 값이 들어가는 테이블 리스트)
# 예를들어 d[2]에는 0,1,2 번째 창고의 최적의 해가 들어가있음 
d = [0] * 100

# 다이나믹 프로그래밍 (보텀업)
# 창고가 0번째 까지만 있다면 최적의 해는 첫번째 창고의 식량값이 들어가 있을 것이다.
d[0] = arr[0]
# 창고가 1번째 까지만 있다면 (2개) 최적의 해는 첫번째 두번째 중 큰 값이 들어가 있을 것이다.
d[1] = max(arr[0], arr[1])

# 0번과 1번 인덱스엔 값이 들어 있으므로 2번 인덱스부터 n 번 인덱스까지 DP테이블에 채워 넣는다.
for i in range(2, n):
    # i번째 까지 창고가 있을 경우
    d[i] = max(d[i - 1], d[i - 2] + arr[i])

print(d[n - 1])