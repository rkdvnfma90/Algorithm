"""
1로 만들기
정수 x가 주어질 때 정수 x에 사용할 수 있는 연산은 다음과 같이 4가지 이다.
    a. x가 5로 나누어떨어지면 5로 나눈다
    b. x가 3으로 나누어떨어지면 3으로 나눈다
    c. x가 2로 나누어떨어지면 2로 나눈다
    d. x에서 1을 뺀다.

정수 x가 주어졌을때 연산 4개를 적절히 사용하여 1을 만드려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

예를들어 정수가 26이면 다음과 같이 3번 계산한다.
1. 26 - 1 = 25
2. 25 / 5 = 5
3. 5 / 5 = 1

입력조건
1. 첫째줄에 정수 x가 주어진다 (1 <= x <= 30,000)
"""

# 정수 x 입력
x = int(input())

# 만약 x 가 1이라면 (인덱스 0) 연산횟수는 0이므로 그대로 0으로 둔다.
# 계산된 결과를 저장하기 위한 DP 테이블 초기화
# 해당 DP 테이블은 입력받은 정수 x 인덱스 위치에 연산 횟수가 들어가있다.
# 예를들어 x = 6 이라면 d[6] 에는 2가 들어가있음.
d = [0] * 30001

for i in range(2, x+1):

    # 해당 반복문 안에 존재하는 점화식에 + 1 이 되는 이유 : 함수의 호출 횟수를 구해야 하기 때문
    
    # 1을 빼는 연산
    d[i] = d[i - 1] + 1

    # 현재의 수가 2로 나누어 떨어 진다면, 1을 빼는 연산과 2로 나누는 연산중 더 작은값을 d[i] 에 넣는다.
    if i % 2 == 0:
        d[i] = min(d[i], d[i // 2] + 1)

    # 현재의 수가 3으로 나누어 떨어 진다면, 1을 빼는 연산과 3으로 나누는 연산중 더 작은값을 d[i] 에 넣는다.
    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)

    # 현재의 수가 5로 나누어 떨어 진다면, 1을 빼는 연산과 5로 나누는 연산중 더 작은값을 d[i] 에 넣는다.
    if i % 5 == 0:
        d[i] = min(d[i], d[i // 5] + 1)

# 정수 x의 연산횟수 출력
print(d[x])