/*
무지의 먹방
평소 식욕이 왕성한 무지는 자신의 재능을 뽐내고 싶어 졌고 고민 끝에 카카오 TV 라이브로 방송을 하기로 마음먹었다.

그냥 먹방을 하면 다른 방송과 차별성이 없기 때문에 무지는 아래와 같이 독특한 방식을 생각해냈다.

회전판에 먹어야 할 N 개의 음식이 있다.
각 음식에는 1부터 N 까지 번호가 붙어있으며, 각 음식을 섭취하는데 일정 시간이 소요된다.
무지는 다음과 같은 방법으로 음식을 섭취한다.

무지는 1번 음식부터 먹기 시작하며, 회전판은 번호가 증가하는 순서대로 음식을 무지 앞으로 가져다 놓는다.
마지막 번호의 음식을 섭취한 후에는 회전판에 의해 다시 1번 음식이 무지 앞으로 온다.
무지는 음식 하나를 1초 동안 섭취한 후 남은 음식은 그대로 두고, 다음 음식을 섭취한다.
다음 음식이란, 아직 남은 음식 중 다음으로 섭취해야 할 가장 가까운 번호의 음식을 말한다.
회전판이 다음 음식을 무지 앞으로 가져오는데 걸리는 시간은 없다고 가정한다.
무지가 먹방을 시작한 지 K 초 후에 네트워크 장애로 인해 방송이 잠시 중단되었다.
무지는 네트워크 정상화 후 다시 방송을 이어갈 때, 몇 번 음식부터 섭취해야 하는지를 알고자 한다.
각 음식을 모두 먹는데 필요한 시간이 담겨있는 배열 food_times, 네트워크 장애가 발생한 시간 K 초가 매개변수로 주어질 때 몇 번 음식부터 다시 섭취하면 되는지 return 하도록 solution 함수를 완성하라.

제한사항
food_times 는 각 음식을 모두 먹는데 필요한 시간이 음식의 번호 순서대로 들어있는 배열이다.
k 는 방송이 중단된 시간을 나타낸다.
만약 더 섭취해야 할 음식이 없다면 -1을 반환하면 된다.
정확성 테스트 제한 사항
food_times 의 길이는 1 이상 2,000 이하이다.
food_times 의 원소는 1 이상 1,000 이하의 자연수이다.
k는 1 이상 2,000,000 이하의 자연수이다.
효율성 테스트 제한 사항
food_times 의 길이는 1 이상 200,000 이하이다.
food_times 의 원소는 1 이상 100,000,000 이하의 자연수이다.
k는 1 이상 2 x 10^13 이하의 자연수이다.

입출력 예
food_times / k / result
[3, 1, 2]  / 5 / 1

입출력 예 #1

0~1초 동안에 1번 음식을 섭취한다. 남은 시간은 [2,1,2] 이다.
1~2초 동안 2번 음식을 섭취한다. 남은 시간은 [2,0,2] 이다.
2~3초 동안 3번 음식을 섭취한다. 남은 시간은 [2,0,1] 이다.
3~4초 동안 1번 음식을 섭취한다. 남은 시간은 [1,0,1] 이다.
4~5초 동안 (2번 음식은 다 먹었으므로) 3번 음식을 섭취한다. 남은 시간은 [1,0,0] 이다.
5초에서 네트워크 장애가 발생했다. 1번 음식을 섭취해야 할 때 중단되었으므로, 장애 복구 후에 1번 음식부터 다시 먹기 시작하면 된다.

해결방안
우선 모든 음식을 시간을 기준으로 정렬하여, 시간이 적게 걸리는 음식부터 제거해 나가야 한다.
예를들어 k는 15초이고
1번음식 : 8초
2번음식 : 6초
3번음식 : 4초
일때 시간이 적게 걸리는 음식부터 제거하려면 우선순위 큐 (최소힙)에 삽입하여 처리하면 효율적이다.

첫단계에서는 가장 적게 걸리는 음식인 3번 음식을 제거한다. 다만, 음식이 아직 3개가 있으므로 
남은음식 수 x 현재 음식을 먹는데 걸리는시간 즉 3 x 4 = 12 를 k에서 뺀다.
다시말해 3번 음식을 다 먹으려면 12초가 걸린다는 의미이다. 
결과적으로 전체 남은 시간이 15초에서 3초로 줄어들게 된다.

전체 남은 시간 k = 3이고 이번 단계에서는 2번 음식을 빼야 한다. 3번 음식의 경우 다 먹었으므로
현재 남은 음식은 2개이고, 2번음식을 먹을때 6초가 걸리므로 2 x 6 = 12 를 k에서 뺀다.
하지만 k가 12보다 작기때문에 빼지않고, 정답인 다음으로 먹어야 할 음식의 번호를 찾아 출력 해야 한다.
매초 먹어야할 음식을 나열해보면 아래와 같다.
1번음식, 2번음식, 1번음식, 2번음식
전체 남은 시간이 3초이므로 4번째 음식의 번호 즉 2번음식을 출력하면 정답.

핵심
소요시간이 가장 적은 음식을 다 먹을때까지는 전체 음식 개수만큼 순회하는 것이다.
그 다음부터는 소요시간이 가장 적은 음식은 없어지고, 그다음으로 적은 음식을 다 먹을때 까지 또 전체음식의 개수만큼 순회한다.
순회가 되지 않으면 그때부터 몇번째 위치인지 확인하면 된다.

잘 이해가 안됐던 점 or 내 풀이
1. 맨처음엔 멍청하게도 왜 현재 걸리는 시간에서 이전에 걸렸던 시간을 빼는지 잘 이해가 안됐는데, 너무 멍청했음.
예를들어 [4,6,10] 이런식으로 입력이 주어졌을때 4를 다 먹기위해선 총 4바퀴를 돌아야 함. 4바퀴 돌면서 당연히 다른 6 이나 10도
4씩 감소하는데 멍청하게 이부분을 간과해버림.

2. foods를 오름차순으로 정렬하여 foods.shift()를 사용했는데, 맨 앞의 요소부터 꺼내기 때문에 시간복잡도가 어마어마하게 증가했을 것.
그래서 내림차순으로 정렬하고 foods.pop()을 사용하여 맨 끝의 요소부터 꺼내기 때문에 시간복잡도는 o(n). 
이렇게 바꾸니 테스트 통과.

3. 
*/

function solution(food_times, k) {
  let answer = 0;
  let food_leng = food_times.length;
  let foods = [];
  let total = 0; // 모든 음식을 먹을때 걸리는 시간.
  let sum_val = 0; // 음식을 먹을때 걸린 시간 누적값.
  let previous_val = 0; // 이전 음식을 먹을때 걸린 시간.

  for (let i = 0; i < food_times.length; i++) {
    foods[i] = { time: food_times[i], number: i + 1 };
    total += food_times[i];
  }

  // 먹을 음식이 없으면 -1 리턴 -> 즉, 네트워크 장애가 걸리는 k초 이전에 다 먹을 수 있으면.
  if (total <= k) {
    return -1;
  }

  // 걸리는 시간 기준으로 내림차순으로 정렬하여 끝에서부터 pop 한다.
  foods.sort((a, b) => b.time - a.time);

  /*
  sum_val : 먹기위해 사용한 시간의 누적값
  foods[foods.length - 1] : 내림차순으로 정렬되어 있어, 가장 작은 값을 뽑기위함 (현재의 값)
  previous_val : 이전 음식을 먹을때 걸린 시간
  food_leng : 현재 음식의 수

  즉, 여태 누적된 값이 k 보다 커지면 반복문 탈출한다.
  */
  while (
    sum_val + (foods[foods.length - 1].time - previous_val) * food_leng <=
    k
  ) {
    // 최소값을 pop
    let now = foods.pop();
    // 먹기 위해 사용한 시간을 누적한다.
    sum_val += (now.time - previous_val) * food_leng;
    // 현재 음식을 모두 먹었기 때문에 1 감소 시킨다.
    food_leng -= 1;
    // 이전 값을 빼야 하기 때문에 현재 now를 이전값으로 설정해준다.
    previous_val = now.time;
  }

  // 결과를 구하기 위하여 number 를 기준으로 다시 정렬 한다.
  foods.sort((a, b) => a.number - b.number);

  // 남은 음식중에서 몇번째 음식인지 확인하기 위해서 (k - sum_val) % food_leng 의 number 를 구한다.
  answer = foods[(k - sum_val) % food_leng].number;

  return answer;
}
